import java.nio.file.Paths
import java.nio.file.Path

plugins {
    id 'com.github.ben-manes.versions' version '0.25.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'org.sonarqube' version '2.7.1'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'signing'

group = 'io.bit3'
description = 'SASS compiler using libsass.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    manifest {
        attributes 'Implementation-Title': 'jsass',
                'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencyLocking {
    lockAllConfigurations()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    compile group: 'org.sharegov', name: 'mjson', version: '1.4.1'
    testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.28'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.5.2')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.5.2')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.5.2')
    testImplementation('org.hamcrest:hamcrest-library:1.3')
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

test {
    useJUnitPlatform()

    systemProperty 'org.slf4j.simpleLogger.log.io.bit3.jsass', 'trace'

    if (project.hasProperty('test.tmpdir')) {
        Path path = Paths.get(Objects.toString(project.findProperty('test.tmpdir')))
        systemProperty 'java.io.tmpdir', path.toAbsolutePath().normalize().toString()
    }
}

release {
    git {
        requireBranch = 'master|develop'
    }
}

sonarqube {
    properties {
        def description = grgit.describe()

        property "sonar.exclusions", "**/src/main/libsass/**"
        property "sonar.projectVersion", description
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

// jni header generation
task jniHeaders(type:Exec) {
    def javaVersion = JavaVersion.current()
    def isJava9Compatible = javaVersion.isJava9Compatible()

    def mainClasspath = sourceSets.main.output.classesDirs.asPath
    if (isJava9Compatible) {
        // JDK 9 or newer
        commandLine "javac", "-h", "src/main/c", "-classpath", mainClasspath, "src/main/java/io/bit3/jsass/adapter/NativeAdapter.java"
    } else {
        // JDK 8 or older
        commandLine "javah", "-classpath", mainClasspath, "-d", "src/main/c", "-jni", "-force", "io.bit3.jsass.adapter.NativeAdapter"
    }

    def testClasspath = sourceSets.test.output.classesDirs.asPath
    if (isJava9Compatible) {
        // JDK 9 or newer
        commandLine "javac", "-h", "src/test/c", "-classpath", testClasspath, "src/test/java/io/bit3/jsass/adapter/NativeTestAdapter.java"
    } else {
        // JDK 8 or older
        commandLine "javah", "-classpath", testClasspath, "-d", "src/test/c", "-jni", "-force", "io.bit3.jsass.adapter.NativeTestAdapter"
    }

    dependsOn classes
    dependsOn testClasses
}
jar.dependsOn jniHeaders

// javadoc.jar generation
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// sources.jar generation
task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

// summarize artifacts
artifacts {
    archives javadocJar, sourceJar
}

// signing artifacts
if (project.hasProperty("signing.gnupg.keyName") && project.hasProperty("signing.gnupg.passphrase")) {
    signing {
        useGpgCmd()
        sign configurations.archives
    }
} else if (project.hasProperty("signing.keyId") && project.hasProperty("signing.password")) {
    signing {
        sign configurations.archives
    }
}

apply from: 'maven.gradle'

// -----------------------------------------------------------------------------

def isVerbose() {
    def logLevel = gradle.startParameter.logLevel
    return LogLevel.INFO == logLevel || LogLevel.DEBUG == logLevel
}

task determineUid() {
    def file = new File(project.buildDir, "uid")

    project.ext['uid'] = file.canRead() ? new String(file.readBytes()) : 0
    outputs.file(file)

    doLast {
        def user = System.getProperty("user.name")
        def output = new ByteArrayOutputStream()
        exec {
            commandLine 'id', '-u', user
            standardOutput = output
        }
        def uid = output.toString().trim()
        file.write((String) uid)
        project.ext['uid'] = uid
    }
}

task determineGid() {
    def file = new File(project.buildDir, "gid")

    project.ext['gid'] = file.canRead() ? new String(file.readBytes()) : 0
    outputs.file(file)

    doLast {
        def user = System.getProperty("user.name")
        def output = new ByteArrayOutputStream()
        exec {
            commandLine 'id', '-g', user
            standardOutput = output
        }
        def gid = output.toString().trim()
        file.write((String) gid)
        project.ext['gid'] = gid
    }
}

task determineRepositoryHeadStability() {
    project.ext['headIsUpstream'] = true

    doLast {
        def branch = grgit.branch.current()

        if (branch) {
            branch = branch.getName()
        }

        if (!branch || 'HEAD' == branch) {
            def tag = grgit.describe()

            project.ext['headIsUpstream'] = !(tag =~ /^\d+(\.\d+)+$/)
        } else {
            project.ext['headIsUpstream'] = 'master' != branch
        }
    }
}

task determineDockerAvailable() {
    def file = new File(project.buildDir, "docker")
    outputs.file(file)

    doLast {
        def execResult = exec {
            commandLine 'docker', '--version'
            ignoreExitValue = true
            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
        }

        if (execResult.exitValue != 0) {
            throw new GradleException("Docker is required to run this task")
        }

        file.write("available")
    }
}

def pullDockerContainer(name) {
    def type = 'stable'

    if (headIsUpstream) {
        type = 'latest'
    }

    def output = new ByteArrayOutputStream()
    def execResult = exec {
        workingDir project.projectDir
        commandLine 'docker', 'pull', "registry.gitlab.com/jsass/docker/$name:$type"

        if (!isVerbose()) {
            standardOutput = output
            errorOutput = output
            ignoreExitValue = true
        }
    }

    if (execResult.exitValue != 0) {
        throw new GradleException("Docker pull failed\n" + output.toString())
    }
}

def runDockerContainer(name) {
    pullDockerContainer(name)

    def type = 'stable'

    if (headIsUpstream) {
        type = 'latest'
    }

    def output = new ByteArrayOutputStream()
    def execResult = exec {
        workingDir project.projectDir
        commandLine 'docker', 'run', "--user=$uid:$gid", '--rm', '-v', "${project.projectDir}:/jsass", "registry.gitlab.com/jsass/docker/$name:$type"

        if (!isVerbose()) {
            standardOutput = output
            errorOutput = output
            ignoreExitValue = true
        }
    }

    if (execResult.exitValue != 0) {
        throw new GradleException("Docker run failed\n" + output.toString())
    }
}

// -----------------------------------------------------------------------------

// Build native libs
task buildNativeLibs {
    dependsOn 'buildNativeDarwin64Libs',
              'buildNativeLinux64Libs',
              'buildNativeLinuxArmhf32Libs',
              'buildNativeLinuxAarch64Libs',
              'buildNativeWindows64Libs'
}

task buildNativeDarwin64Libs {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for darwin x64'
        runDockerContainer('build-darwin-x64')
    }
}

task buildNativeLinux64Libs {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for linux x64'
        runDockerContainer('build-linux-x64')
    }
}

task buildNativeLinuxArmhf32Libs {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for linux armhf32'
        runDockerContainer('build-linux-armhf32')
    }
}

task buildNativeLinuxAarch64Libs {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for linux aarch64'
        runDockerContainer('build-linux-aarch64')
    }
}

task buildNativeWindows64Libs {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for windows x64'
        runDockerContainer('build-windows-x64')
    }
}

// -----------------------------------------------------------------------------

// Run docker tests
task runDockerTests {
    dependsOn 'runDockerTestCentOS6x64',
              'runDockerTestCentOS7',
              'runDockerTestUbuntu1404',
              'runDockerTestUbuntu1604'
}

task runDockerTestCentOS6x64 {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker CentOS 6 test container'
        runDockerContainer('test-centos6-x64')
    }
}

task runDockerTestCentOS7 {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker CentOS 7 test container'
        runDockerContainer('test-centos7')
    }
}

task runDockerTestUbuntu1404 {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker ubuntu 14.04 test container'
        runDockerContainer('test-ubuntu14.04')
    }
}

task runDockerTestUbuntu1604 {
    dependsOn determineUid, determineGid, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker ubuntu 16.04 test container'
        runDockerContainer('test-ubuntu16.04')
    }
}
